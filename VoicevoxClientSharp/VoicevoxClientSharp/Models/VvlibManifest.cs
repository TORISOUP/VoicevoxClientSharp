/*
 * VOICEVOX Engine
 *
 * VOICEVOX の音声合成エンジンです。
 *
 * The version of the OpenAPI document: 0.21.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace VoicevoxClient.Generated.Model
{
    /// <summary>
    /// vvlib(VOICEVOX Library)に関する情報
    /// </summary>
    [DataContract(Name = "VvlibManifest")]
    public class VvlibManifest : IEquatable<VvlibManifest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VvlibManifest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VvlibManifest()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VvlibManifest" /> class.
        /// </summary>
        /// <param name="manifestVersion">マニフェストバージョン (required).</param>
        /// <param name="name">音声ライブラリ名 (required).</param>
        /// <param name="varVersion">音声ライブラリバージョン (required).</param>
        /// <param name="uuid">音声ライブラリのUUID (required).</param>
        /// <param name="brandName">エンジンのブランド名 (required).</param>
        /// <param name="engineName">エンジン名 (required).</param>
        /// <param name="engineUuid">エンジンのUUID (required).</param>
        public VvlibManifest(string manifestVersion = default,
            string name = default,
            string varVersion = default,
            string uuid = default,
            string brandName = default,
            string engineName = default,
            string engineUuid = default)
        {
            // to ensure "manifestVersion" is required (not null)
            if (manifestVersion == null)
            {
                throw new ArgumentNullException(
                    "manifestVersion is a required property for VvlibManifest and cannot be null");
            }

            ManifestVersion = manifestVersion;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for VvlibManifest and cannot be null");
            }

            Name = name;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException(
                    "varVersion is a required property for VvlibManifest and cannot be null");
            }

            VarVersion = varVersion;
            // to ensure "uuid" is required (not null)
            if (uuid == null)
            {
                throw new ArgumentNullException("uuid is a required property for VvlibManifest and cannot be null");
            }

            Uuid = uuid;
            // to ensure "brandName" is required (not null)
            if (brandName == null)
            {
                throw new ArgumentNullException(
                    "brandName is a required property for VvlibManifest and cannot be null");
            }

            BrandName = brandName;
            // to ensure "engineName" is required (not null)
            if (engineName == null)
            {
                throw new ArgumentNullException(
                    "engineName is a required property for VvlibManifest and cannot be null");
            }

            EngineName = engineName;
            // to ensure "engineUuid" is required (not null)
            if (engineUuid == null)
            {
                throw new ArgumentNullException(
                    "engineUuid is a required property for VvlibManifest and cannot be null");
            }

            EngineUuid = engineUuid;
        }

        /// <summary>
        /// マニフェストバージョン
        /// </summary>
        /// <value>マニフェストバージョン</value>
        [DataMember(Name = "manifest_version", IsRequired = true, EmitDefaultValue = false)]
        public string ManifestVersion { get; set; }

        /// <summary>
        /// 音声ライブラリ名
        /// </summary>
        /// <value>音声ライブラリ名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// 音声ライブラリバージョン
        /// </summary>
        /// <value>音声ライブラリバージョン</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// 音声ライブラリのUUID
        /// </summary>
        /// <value>音声ライブラリのUUID</value>
        [DataMember(Name = "uuid", IsRequired = true, EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// エンジンのブランド名
        /// </summary>
        /// <value>エンジンのブランド名</value>
        [DataMember(Name = "brand_name", IsRequired = true, EmitDefaultValue = false)]
        public string BrandName { get; set; }

        /// <summary>
        /// エンジン名
        /// </summary>
        /// <value>エンジン名</value>
        [DataMember(Name = "engine_name", IsRequired = true, EmitDefaultValue = false)]
        public string EngineName { get; set; }

        /// <summary>
        /// エンジンのUUID
        /// </summary>
        /// <value>エンジンのUUID</value>
        [DataMember(Name = "engine_uuid", IsRequired = true, EmitDefaultValue = false)]
        public string EngineUuid { get; set; }

        /// <summary>
        /// Returns true if VvlibManifest instances are equal
        /// </summary>
        /// <param name="input">Instance of VvlibManifest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VvlibManifest input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    ManifestVersion == input.ManifestVersion ||
                    (ManifestVersion != null &&
                     ManifestVersion.Equals(input.ManifestVersion))
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    VarVersion == input.VarVersion ||
                    (VarVersion != null &&
                     VarVersion.Equals(input.VarVersion))
                ) &&
                (
                    Uuid == input.Uuid ||
                    (Uuid != null &&
                     Uuid.Equals(input.Uuid))
                ) &&
                (
                    BrandName == input.BrandName ||
                    (BrandName != null &&
                     BrandName.Equals(input.BrandName))
                ) &&
                (
                    EngineName == input.EngineName ||
                    (EngineName != null &&
                     EngineName.Equals(input.EngineName))
                ) &&
                (
                    EngineUuid == input.EngineUuid ||
                    (EngineUuid != null &&
                     EngineUuid.Equals(input.EngineUuid))
                );
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VvlibManifest {\n");
            sb.Append("  ManifestVersion: ").Append(ManifestVersion).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  EngineName: ").Append(EngineName).Append("\n");
            sb.Append("  EngineUuid: ").Append(EngineUuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as VvlibManifest);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ManifestVersion != null)
                {
                    hashCode = hashCode * 59 + ManifestVersion.GetHashCode();
                }

                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }

                if (VarVersion != null)
                {
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                }

                if (Uuid != null)
                {
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                }

                if (BrandName != null)
                {
                    hashCode = hashCode * 59 + BrandName.GetHashCode();
                }

                if (EngineName != null)
                {
                    hashCode = hashCode * 59 + EngineName.GetHashCode();
                }

                if (EngineUuid != null)
                {
                    hashCode = hashCode * 59 + EngineUuid.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}