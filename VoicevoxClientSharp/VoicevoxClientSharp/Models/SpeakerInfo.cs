/*
 * VOICEVOX Engine
 *
 * VOICEVOX の音声合成エンジンです。
 *
 * The version of the OpenAPI document: 0.21.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace VoicevoxClient.Generated.Model
{
    /// <summary>
    /// キャラクターの追加情報
    /// </summary>
    [DataContract(Name = "SpeakerInfo")]
    public class SpeakerInfo : IEquatable<SpeakerInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpeakerInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpeakerInfo()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpeakerInfo" /> class.
        /// </summary>
        /// <param name="policy">policy.md (required).</param>
        /// <param name="portrait">立ち絵画像をbase64エンコードしたもの、あるいはURL (required).</param>
        /// <param name="styleInfos">styleInfos (required).</param>
        public SpeakerInfo(string policy = default, string portrait = default, List<StyleInfo> styleInfos = default)
        {
            // to ensure "policy" is required (not null)
            if (policy == null)
            {
                throw new ArgumentNullException("policy is a required property for SpeakerInfo and cannot be null");
            }

            Policy = policy;
            // to ensure "portrait" is required (not null)
            if (portrait == null)
            {
                throw new ArgumentNullException("portrait is a required property for SpeakerInfo and cannot be null");
            }

            Portrait = portrait;
            // to ensure "styleInfos" is required (not null)
            if (styleInfos == null)
            {
                throw new ArgumentNullException("styleInfos is a required property for SpeakerInfo and cannot be null");
            }

            StyleInfos = styleInfos;
        }

        /// <summary>
        /// policy.md
        /// </summary>
        /// <value>policy.md</value>
        [DataMember(Name = "policy", IsRequired = true, EmitDefaultValue = false)]
        public string Policy { get; set; }

        /// <summary>
        /// 立ち絵画像をbase64エンコードしたもの、あるいはURL
        /// </summary>
        /// <value>立ち絵画像をbase64エンコードしたもの、あるいはURL</value>
        [DataMember(Name = "portrait", IsRequired = true, EmitDefaultValue = false)]
        public string Portrait { get; set; }

        /// <summary>
        /// Gets or Sets StyleInfos
        /// </summary>
        [DataMember(Name = "style_infos", IsRequired = true, EmitDefaultValue = false)]
        public List<StyleInfo> StyleInfos { get; set; }

        /// <summary>
        /// Returns true if SpeakerInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SpeakerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpeakerInfo input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Policy == input.Policy ||
                    (Policy != null &&
                     Policy.Equals(input.Policy))
                ) &&
                (
                    Portrait == input.Portrait ||
                    (Portrait != null &&
                     Portrait.Equals(input.Portrait))
                ) &&
                (
                    StyleInfos == input.StyleInfos ||
                    (StyleInfos != null &&
                     input.StyleInfos != null &&
                     StyleInfos.SequenceEqual(input.StyleInfos))
                );
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpeakerInfo {\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  Portrait: ").Append(Portrait).Append("\n");
            sb.Append("  StyleInfos: ").Append(StyleInfos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SpeakerInfo);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Policy != null)
                {
                    hashCode = hashCode * 59 + Policy.GetHashCode();
                }

                if (Portrait != null)
                {
                    hashCode = hashCode * 59 + Portrait.GetHashCode();
                }

                if (StyleInfos != null)
                {
                    hashCode = hashCode * 59 + StyleInfos.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}