/*
 * VOICEVOX Engine
 *
 * VOICEVOX の音声合成エンジンです。
 *
 * The version of the OpenAPI document: 0.21.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace VoicevoxClient.Generated.Model
{
    /// <summary>
    /// プリセット情報
    /// </summary>
    [DataContract(Name = "Preset")]
    public class Preset : IEquatable<Preset>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Preset" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Preset()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Preset" /> class.
        /// </summary>
        /// <param name="id">プリセットID (required).</param>
        /// <param name="name">プリセット名 (required).</param>
        /// <param name="speakerUuid">キャラクターのUUID (required).</param>
        /// <param name="styleId">スタイルID (required).</param>
        /// <param name="speedScale">全体の話速 (required).</param>
        /// <param name="pitchScale">全体の音高 (required).</param>
        /// <param name="intonationScale">全体の抑揚 (required).</param>
        /// <param name="volumeScale">全体の音量 (required).</param>
        /// <param name="prePhonemeLength">音声の前の無音時間 (required).</param>
        /// <param name="postPhonemeLength">音声の後の無音時間 (required).</param>
        /// <param name="pauseLength">句読点などの無音時間.</param>
        /// <param name="pauseLengthScale">句読点などの無音時間（倍率） (default to 1M).</param>
        public Preset(int id = default,
            string name = default,
            string speakerUuid = default,
            int styleId = default,
            decimal speedScale = default,
            decimal pitchScale = default,
            decimal intonationScale = default,
            decimal volumeScale = default,
            decimal prePhonemeLength = default,
            decimal postPhonemeLength = default,
            decimal pauseLength = default,
            decimal pauseLengthScale = 1M)
        {
            Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Preset and cannot be null");
            }

            Name = name;
            // to ensure "speakerUuid" is required (not null)
            if (speakerUuid == null)
            {
                throw new ArgumentNullException("speakerUuid is a required property for Preset and cannot be null");
            }

            SpeakerUuid = speakerUuid;
            StyleId = styleId;
            SpeedScale = speedScale;
            PitchScale = pitchScale;
            IntonationScale = intonationScale;
            VolumeScale = volumeScale;
            PrePhonemeLength = prePhonemeLength;
            PostPhonemeLength = postPhonemeLength;
            PauseLength = pauseLength;
            PauseLengthScale = pauseLengthScale;
        }

        /// <summary>
        /// プリセットID
        /// </summary>
        /// <value>プリセットID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// プリセット名
        /// </summary>
        /// <value>プリセット名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// キャラクターのUUID
        /// </summary>
        /// <value>キャラクターのUUID</value>
        [DataMember(Name = "speaker_uuid", IsRequired = true, EmitDefaultValue = false)]
        public string SpeakerUuid { get; set; }

        /// <summary>
        /// スタイルID
        /// </summary>
        /// <value>スタイルID</value>
        [DataMember(Name = "style_id", IsRequired = true, EmitDefaultValue = false)]
        public int StyleId { get; set; }

        /// <summary>
        /// 全体の話速
        /// </summary>
        /// <value>全体の話速</value>
        [DataMember(Name = "speedScale", IsRequired = true, EmitDefaultValue = false)]
        public decimal SpeedScale { get; set; }

        /// <summary>
        /// 全体の音高
        /// </summary>
        /// <value>全体の音高</value>
        [DataMember(Name = "pitchScale", IsRequired = true, EmitDefaultValue = false)]
        public decimal PitchScale { get; set; }

        /// <summary>
        /// 全体の抑揚
        /// </summary>
        /// <value>全体の抑揚</value>
        [DataMember(Name = "intonationScale", IsRequired = true, EmitDefaultValue = false)]
        public decimal IntonationScale { get; set; }

        /// <summary>
        /// 全体の音量
        /// </summary>
        /// <value>全体の音量</value>
        [DataMember(Name = "volumeScale", IsRequired = true, EmitDefaultValue = false)]
        public decimal VolumeScale { get; set; }

        /// <summary>
        /// 音声の前の無音時間
        /// </summary>
        /// <value>音声の前の無音時間</value>
        [DataMember(Name = "prePhonemeLength", IsRequired = true, EmitDefaultValue = false)]
        public decimal PrePhonemeLength { get; set; }

        /// <summary>
        /// 音声の後の無音時間
        /// </summary>
        /// <value>音声の後の無音時間</value>
        [DataMember(Name = "postPhonemeLength", IsRequired = true, EmitDefaultValue = false)]
        public decimal PostPhonemeLength { get; set; }

        /// <summary>
        /// 句読点などの無音時間
        /// </summary>
        /// <value>句読点などの無音時間</value>
        [DataMember(Name = "pauseLength", EmitDefaultValue = false)]
        public decimal PauseLength { get; set; }

        /// <summary>
        /// 句読点などの無音時間（倍率）
        /// </summary>
        /// <value>句読点などの無音時間（倍率）</value>
        [DataMember(Name = "pauseLengthScale", EmitDefaultValue = false)]
        public decimal PauseLengthScale { get; set; }

        /// <summary>
        /// Returns true if Preset instances are equal
        /// </summary>
        /// <param name="input">Instance of Preset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Preset input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Id == input.Id ||
                    Id.Equals(input.Id)
                ) &&
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    SpeakerUuid == input.SpeakerUuid ||
                    (SpeakerUuid != null &&
                     SpeakerUuid.Equals(input.SpeakerUuid))
                ) &&
                (
                    StyleId == input.StyleId ||
                    StyleId.Equals(input.StyleId)
                ) &&
                (
                    SpeedScale == input.SpeedScale ||
                    SpeedScale.Equals(input.SpeedScale)
                ) &&
                (
                    PitchScale == input.PitchScale ||
                    PitchScale.Equals(input.PitchScale)
                ) &&
                (
                    IntonationScale == input.IntonationScale ||
                    IntonationScale.Equals(input.IntonationScale)
                ) &&
                (
                    VolumeScale == input.VolumeScale ||
                    VolumeScale.Equals(input.VolumeScale)
                ) &&
                (
                    PrePhonemeLength == input.PrePhonemeLength ||
                    PrePhonemeLength.Equals(input.PrePhonemeLength)
                ) &&
                (
                    PostPhonemeLength == input.PostPhonemeLength ||
                    PostPhonemeLength.Equals(input.PostPhonemeLength)
                ) &&
                (
                    PauseLength == input.PauseLength ||
                    PauseLength.Equals(input.PauseLength)
                ) &&
                (
                    PauseLengthScale == input.PauseLengthScale ||
                    PauseLengthScale.Equals(input.PauseLengthScale)
                );
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Preset {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SpeakerUuid: ").Append(SpeakerUuid).Append("\n");
            sb.Append("  StyleId: ").Append(StyleId).Append("\n");
            sb.Append("  SpeedScale: ").Append(SpeedScale).Append("\n");
            sb.Append("  PitchScale: ").Append(PitchScale).Append("\n");
            sb.Append("  IntonationScale: ").Append(IntonationScale).Append("\n");
            sb.Append("  VolumeScale: ").Append(VolumeScale).Append("\n");
            sb.Append("  PrePhonemeLength: ").Append(PrePhonemeLength).Append("\n");
            sb.Append("  PostPhonemeLength: ").Append(PostPhonemeLength).Append("\n");
            sb.Append("  PauseLength: ").Append(PauseLength).Append("\n");
            sb.Append("  PauseLengthScale: ").Append(PauseLengthScale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Preset);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }

                if (SpeakerUuid != null)
                {
                    hashCode = hashCode * 59 + SpeakerUuid.GetHashCode();
                }

                hashCode = hashCode * 59 + StyleId.GetHashCode();
                hashCode = hashCode * 59 + SpeedScale.GetHashCode();
                hashCode = hashCode * 59 + PitchScale.GetHashCode();
                hashCode = hashCode * 59 + IntonationScale.GetHashCode();
                hashCode = hashCode * 59 + VolumeScale.GetHashCode();
                hashCode = hashCode * 59 + PrePhonemeLength.GetHashCode();
                hashCode = hashCode * 59 + PostPhonemeLength.GetHashCode();
                hashCode = hashCode * 59 + PauseLength.GetHashCode();
                hashCode = hashCode * 59 + PauseLengthScale.GetHashCode();
                return hashCode;
            }
        }
    }
}