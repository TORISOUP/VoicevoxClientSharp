/*
 * VOICEVOX Engine
 *
 * VOICEVOX の音声合成エンジンです。
 *
 * The version of the OpenAPI document: 0.21.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace VoicevoxClient.Generated.Model
{
    /// <summary>
    /// 音声ライブラリに含まれるキャラクターの情報
    /// </summary>
    [DataContract(Name = "LibrarySpeaker")]
    public class LibrarySpeaker : IEquatable<LibrarySpeaker>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibrarySpeaker" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LibrarySpeaker()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibrarySpeaker" /> class.
        /// </summary>
        /// <param name="speaker">speaker (required).</param>
        /// <param name="speakerInfo">speakerInfo (required).</param>
        public LibrarySpeaker(Speaker speaker = default, SpeakerInfo speakerInfo = default)
        {
            // to ensure "speaker" is required (not null)
            if (speaker == null)
            {
                throw new ArgumentNullException("speaker is a required property for LibrarySpeaker and cannot be null");
            }

            Speaker = speaker;
            // to ensure "speakerInfo" is required (not null)
            if (speakerInfo == null)
            {
                throw new ArgumentNullException(
                    "speakerInfo is a required property for LibrarySpeaker and cannot be null");
            }

            SpeakerInfo = speakerInfo;
        }

        /// <summary>
        /// Gets or Sets Speaker
        /// </summary>
        [DataMember(Name = "speaker", IsRequired = true, EmitDefaultValue = false)]
        public Speaker Speaker { get; set; }

        /// <summary>
        /// Gets or Sets SpeakerInfo
        /// </summary>
        [DataMember(Name = "speaker_info", IsRequired = true, EmitDefaultValue = false)]
        public SpeakerInfo SpeakerInfo { get; set; }

        /// <summary>
        /// Returns true if LibrarySpeaker instances are equal
        /// </summary>
        /// <param name="input">Instance of LibrarySpeaker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibrarySpeaker input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Speaker == input.Speaker ||
                    (Speaker != null &&
                     Speaker.Equals(input.Speaker))
                ) &&
                (
                    SpeakerInfo == input.SpeakerInfo ||
                    (SpeakerInfo != null &&
                     SpeakerInfo.Equals(input.SpeakerInfo))
                );
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LibrarySpeaker {\n");
            sb.Append("  Speaker: ").Append(Speaker).Append("\n");
            sb.Append("  SpeakerInfo: ").Append(SpeakerInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as LibrarySpeaker);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Speaker != null)
                {
                    hashCode = hashCode * 59 + Speaker.GetHashCode();
                }

                if (SpeakerInfo != null)
                {
                    hashCode = hashCode * 59 + SpeakerInfo.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}