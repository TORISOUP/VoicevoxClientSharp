/*
 * VOICEVOX Engine
 *
 * VOICEVOX の音声合成エンジンです。
 *
 * The version of the OpenAPI document: 0.21.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace VoicevoxClient.Generated.Model
{
    /// <summary>
    /// 辞書のコンパイルに使われる情報
    /// </summary>
    [DataContract(Name = "UserDictWord")]
    public class UserDictWord : IEquatable<UserDictWord>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDictWord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserDictWord()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserDictWord" /> class.
        /// </summary>
        /// <param name="surface">表層形 (required).</param>
        /// <param name="priority">優先度 (required).</param>
        /// <param name="contextId">文脈ID (default to 1348).</param>
        /// <param name="partOfSpeech">品詞 (required).</param>
        /// <param name="partOfSpeechDetail1">品詞細分類1 (required).</param>
        /// <param name="partOfSpeechDetail2">品詞細分類2 (required).</param>
        /// <param name="partOfSpeechDetail3">品詞細分類3 (required).</param>
        /// <param name="inflectionalType">活用型 (required).</param>
        /// <param name="inflectionalForm">活用形 (required).</param>
        /// <param name="stem">原形 (required).</param>
        /// <param name="yomi">読み (required).</param>
        /// <param name="pronunciation">発音 (required).</param>
        /// <param name="accentType">アクセント型 (required).</param>
        /// <param name="moraCount">モーラ数.</param>
        /// <param name="accentAssociativeRule">アクセント結合規則 (required).</param>
        public UserDictWord(string surface = default,
            int priority = default,
            int contextId = 1348,
            string partOfSpeech = default,
            string partOfSpeechDetail1 = default,
            string partOfSpeechDetail2 = default,
            string partOfSpeechDetail3 = default,
            string inflectionalType = default,
            string inflectionalForm = default,
            string stem = default,
            string yomi = default,
            string pronunciation = default,
            int accentType = default,
            int moraCount = default,
            string accentAssociativeRule = default)
        {
            // to ensure "surface" is required (not null)
            if (surface == null)
            {
                throw new ArgumentNullException("surface is a required property for UserDictWord and cannot be null");
            }

            Surface = surface;
            Priority = priority;
            // to ensure "partOfSpeech" is required (not null)
            if (partOfSpeech == null)
            {
                throw new ArgumentNullException(
                    "partOfSpeech is a required property for UserDictWord and cannot be null");
            }

            PartOfSpeech = partOfSpeech;
            // to ensure "partOfSpeechDetail1" is required (not null)
            if (partOfSpeechDetail1 == null)
            {
                throw new ArgumentNullException(
                    "partOfSpeechDetail1 is a required property for UserDictWord and cannot be null");
            }

            PartOfSpeechDetail1 = partOfSpeechDetail1;
            // to ensure "partOfSpeechDetail2" is required (not null)
            if (partOfSpeechDetail2 == null)
            {
                throw new ArgumentNullException(
                    "partOfSpeechDetail2 is a required property for UserDictWord and cannot be null");
            }

            PartOfSpeechDetail2 = partOfSpeechDetail2;
            // to ensure "partOfSpeechDetail3" is required (not null)
            if (partOfSpeechDetail3 == null)
            {
                throw new ArgumentNullException(
                    "partOfSpeechDetail3 is a required property for UserDictWord and cannot be null");
            }

            PartOfSpeechDetail3 = partOfSpeechDetail3;
            // to ensure "inflectionalType" is required (not null)
            if (inflectionalType == null)
            {
                throw new ArgumentNullException(
                    "inflectionalType is a required property for UserDictWord and cannot be null");
            }

            InflectionalType = inflectionalType;
            // to ensure "inflectionalForm" is required (not null)
            if (inflectionalForm == null)
            {
                throw new ArgumentNullException(
                    "inflectionalForm is a required property for UserDictWord and cannot be null");
            }

            InflectionalForm = inflectionalForm;
            // to ensure "stem" is required (not null)
            if (stem == null)
            {
                throw new ArgumentNullException("stem is a required property for UserDictWord and cannot be null");
            }

            Stem = stem;
            // to ensure "yomi" is required (not null)
            if (yomi == null)
            {
                throw new ArgumentNullException("yomi is a required property for UserDictWord and cannot be null");
            }

            Yomi = yomi;
            // to ensure "pronunciation" is required (not null)
            if (pronunciation == null)
            {
                throw new ArgumentNullException(
                    "pronunciation is a required property for UserDictWord and cannot be null");
            }

            Pronunciation = pronunciation;
            AccentType = accentType;
            // to ensure "accentAssociativeRule" is required (not null)
            if (accentAssociativeRule == null)
            {
                throw new ArgumentNullException(
                    "accentAssociativeRule is a required property for UserDictWord and cannot be null");
            }

            AccentAssociativeRule = accentAssociativeRule;
            ContextId = contextId;
            MoraCount = moraCount;
        }

        /// <summary>
        /// 表層形
        /// </summary>
        /// <value>表層形</value>
        [DataMember(Name = "surface", IsRequired = true, EmitDefaultValue = false)]
        public string Surface { get; set; }

        /// <summary>
        /// 優先度
        /// </summary>
        /// <value>優先度</value>
        [DataMember(Name = "priority", IsRequired = true, EmitDefaultValue = false)]
        public int Priority { get; set; }

        /// <summary>
        /// 文脈ID
        /// </summary>
        /// <value>文脈ID</value>
        [DataMember(Name = "context_id", EmitDefaultValue = false)]
        public int ContextId { get; set; }

        /// <summary>
        /// 品詞
        /// </summary>
        /// <value>品詞</value>
        [DataMember(Name = "part_of_speech", IsRequired = true, EmitDefaultValue = false)]
        public string PartOfSpeech { get; set; }

        /// <summary>
        /// 品詞細分類1
        /// </summary>
        /// <value>品詞細分類1</value>
        [DataMember(Name = "part_of_speech_detail_1", IsRequired = true, EmitDefaultValue = false)]
        public string PartOfSpeechDetail1 { get; set; }

        /// <summary>
        /// 品詞細分類2
        /// </summary>
        /// <value>品詞細分類2</value>
        [DataMember(Name = "part_of_speech_detail_2", IsRequired = true, EmitDefaultValue = false)]
        public string PartOfSpeechDetail2 { get; set; }

        /// <summary>
        /// 品詞細分類3
        /// </summary>
        /// <value>品詞細分類3</value>
        [DataMember(Name = "part_of_speech_detail_3", IsRequired = true, EmitDefaultValue = false)]
        public string PartOfSpeechDetail3 { get; set; }

        /// <summary>
        /// 活用型
        /// </summary>
        /// <value>活用型</value>
        [DataMember(Name = "inflectional_type", IsRequired = true, EmitDefaultValue = false)]
        public string InflectionalType { get; set; }

        /// <summary>
        /// 活用形
        /// </summary>
        /// <value>活用形</value>
        [DataMember(Name = "inflectional_form", IsRequired = true, EmitDefaultValue = false)]
        public string InflectionalForm { get; set; }

        /// <summary>
        /// 原形
        /// </summary>
        /// <value>原形</value>
        [DataMember(Name = "stem", IsRequired = true, EmitDefaultValue = false)]
        public string Stem { get; set; }

        /// <summary>
        /// 読み
        /// </summary>
        /// <value>読み</value>
        [DataMember(Name = "yomi", IsRequired = true, EmitDefaultValue = false)]
        public string Yomi { get; set; }

        /// <summary>
        /// 発音
        /// </summary>
        /// <value>発音</value>
        [DataMember(Name = "pronunciation", IsRequired = true, EmitDefaultValue = false)]
        public string Pronunciation { get; set; }

        /// <summary>
        /// アクセント型
        /// </summary>
        /// <value>アクセント型</value>
        [DataMember(Name = "accent_type", IsRequired = true, EmitDefaultValue = false)]
        public int AccentType { get; set; }

        /// <summary>
        /// モーラ数
        /// </summary>
        /// <value>モーラ数</value>
        [DataMember(Name = "mora_count", EmitDefaultValue = false)]
        public int MoraCount { get; set; }

        /// <summary>
        /// アクセント結合規則
        /// </summary>
        /// <value>アクセント結合規則</value>
        [DataMember(Name = "accent_associative_rule", IsRequired = true, EmitDefaultValue = false)]
        public string AccentAssociativeRule { get; set; }

        /// <summary>
        /// Returns true if UserDictWord instances are equal
        /// </summary>
        /// <param name="input">Instance of UserDictWord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDictWord input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Surface == input.Surface ||
                    (Surface != null &&
                     Surface.Equals(input.Surface))
                ) &&
                (
                    Priority == input.Priority ||
                    Priority.Equals(input.Priority)
                ) &&
                (
                    ContextId == input.ContextId ||
                    ContextId.Equals(input.ContextId)
                ) &&
                (
                    PartOfSpeech == input.PartOfSpeech ||
                    (PartOfSpeech != null &&
                     PartOfSpeech.Equals(input.PartOfSpeech))
                ) &&
                (
                    PartOfSpeechDetail1 == input.PartOfSpeechDetail1 ||
                    (PartOfSpeechDetail1 != null &&
                     PartOfSpeechDetail1.Equals(input.PartOfSpeechDetail1))
                ) &&
                (
                    PartOfSpeechDetail2 == input.PartOfSpeechDetail2 ||
                    (PartOfSpeechDetail2 != null &&
                     PartOfSpeechDetail2.Equals(input.PartOfSpeechDetail2))
                ) &&
                (
                    PartOfSpeechDetail3 == input.PartOfSpeechDetail3 ||
                    (PartOfSpeechDetail3 != null &&
                     PartOfSpeechDetail3.Equals(input.PartOfSpeechDetail3))
                ) &&
                (
                    InflectionalType == input.InflectionalType ||
                    (InflectionalType != null &&
                     InflectionalType.Equals(input.InflectionalType))
                ) &&
                (
                    InflectionalForm == input.InflectionalForm ||
                    (InflectionalForm != null &&
                     InflectionalForm.Equals(input.InflectionalForm))
                ) &&
                (
                    Stem == input.Stem ||
                    (Stem != null &&
                     Stem.Equals(input.Stem))
                ) &&
                (
                    Yomi == input.Yomi ||
                    (Yomi != null &&
                     Yomi.Equals(input.Yomi))
                ) &&
                (
                    Pronunciation == input.Pronunciation ||
                    (Pronunciation != null &&
                     Pronunciation.Equals(input.Pronunciation))
                ) &&
                (
                    AccentType == input.AccentType ||
                    AccentType.Equals(input.AccentType)
                ) &&
                (
                    MoraCount == input.MoraCount ||
                    MoraCount.Equals(input.MoraCount)
                ) &&
                (
                    AccentAssociativeRule == input.AccentAssociativeRule ||
                    (AccentAssociativeRule != null &&
                     AccentAssociativeRule.Equals(input.AccentAssociativeRule))
                );
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDictWord {\n");
            sb.Append("  Surface: ").Append(Surface).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ContextId: ").Append(ContextId).Append("\n");
            sb.Append("  PartOfSpeech: ").Append(PartOfSpeech).Append("\n");
            sb.Append("  PartOfSpeechDetail1: ").Append(PartOfSpeechDetail1).Append("\n");
            sb.Append("  PartOfSpeechDetail2: ").Append(PartOfSpeechDetail2).Append("\n");
            sb.Append("  PartOfSpeechDetail3: ").Append(PartOfSpeechDetail3).Append("\n");
            sb.Append("  InflectionalType: ").Append(InflectionalType).Append("\n");
            sb.Append("  InflectionalForm: ").Append(InflectionalForm).Append("\n");
            sb.Append("  Stem: ").Append(Stem).Append("\n");
            sb.Append("  Yomi: ").Append(Yomi).Append("\n");
            sb.Append("  Pronunciation: ").Append(Pronunciation).Append("\n");
            sb.Append("  AccentType: ").Append(AccentType).Append("\n");
            sb.Append("  MoraCount: ").Append(MoraCount).Append("\n");
            sb.Append("  AccentAssociativeRule: ").Append(AccentAssociativeRule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as UserDictWord);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Surface != null)
                {
                    hashCode = hashCode * 59 + Surface.GetHashCode();
                }

                hashCode = hashCode * 59 + Priority.GetHashCode();
                hashCode = hashCode * 59 + ContextId.GetHashCode();
                if (PartOfSpeech != null)
                {
                    hashCode = hashCode * 59 + PartOfSpeech.GetHashCode();
                }

                if (PartOfSpeechDetail1 != null)
                {
                    hashCode = hashCode * 59 + PartOfSpeechDetail1.GetHashCode();
                }

                if (PartOfSpeechDetail2 != null)
                {
                    hashCode = hashCode * 59 + PartOfSpeechDetail2.GetHashCode();
                }

                if (PartOfSpeechDetail3 != null)
                {
                    hashCode = hashCode * 59 + PartOfSpeechDetail3.GetHashCode();
                }

                if (InflectionalType != null)
                {
                    hashCode = hashCode * 59 + InflectionalType.GetHashCode();
                }

                if (InflectionalForm != null)
                {
                    hashCode = hashCode * 59 + InflectionalForm.GetHashCode();
                }

                if (Stem != null)
                {
                    hashCode = hashCode * 59 + Stem.GetHashCode();
                }

                if (Yomi != null)
                {
                    hashCode = hashCode * 59 + Yomi.GetHashCode();
                }

                if (Pronunciation != null)
                {
                    hashCode = hashCode * 59 + Pronunciation.GetHashCode();
                }

                hashCode = hashCode * 59 + AccentType.GetHashCode();
                hashCode = hashCode * 59 + MoraCount.GetHashCode();
                if (AccentAssociativeRule != null)
                {
                    hashCode = hashCode * 59 + AccentAssociativeRule.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}