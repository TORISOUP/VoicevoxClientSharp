/*
 * VOICEVOX Engine
 *
 * VOICEVOX の音声合成エンジンです。
 *
 * The version of the OpenAPI document: 0.21.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VoicevoxClient.Generated.Model
{
    /// <summary>
    /// キャラクターのスタイル情報
    /// </summary>
    [DataContract(Name = "SpeakerStyle")]
    public class SpeakerStyle : IEquatable<SpeakerStyle>
    {
        /// <summary>
        /// スタイルの種類。talk:音声合成クエリの作成と音声合成が可能。singing_teacher:歌唱音声合成用のクエリの作成が可能。frame_decode:歌唱音声合成が可能。sing:歌唱音声合成用のクエリの作成と歌唱音声合成が可能。
        /// </summary>
        /// <value>スタイルの種類。talk:音声合成クエリの作成と音声合成が可能。singing_teacher:歌唱音声合成用のクエリの作成が可能。frame_decode:歌唱音声合成が可能。sing:歌唱音声合成用のクエリの作成と歌唱音声合成が可能。</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Talk for value: talk
            /// </summary>
            [EnumMember(Value = "talk")] Talk = 1,

            /// <summary>
            /// Enum SingingTeacher for value: singing_teacher
            /// </summary>
            [EnumMember(Value = "singing_teacher")]
            SingingTeacher = 2,

            /// <summary>
            /// Enum FrameDecode for value: frame_decode
            /// </summary>
            [EnumMember(Value = "frame_decode")] FrameDecode = 3,

            /// <summary>
            /// Enum Sing for value: sing
            /// </summary>
            [EnumMember(Value = "sing")] Sing = 4
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpeakerStyle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpeakerStyle()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpeakerStyle" /> class.
        /// </summary>
        /// <param name="name">スタイル名 (required).</param>
        /// <param name="id">スタイルID (required).</param>
        /// <param name="type">
        /// スタイルの種類。talk:音声合成クエリの作成と音声合成が可能。singing_teacher:歌唱音声合成用のクエリの作成が可能。frame_decode:歌唱音声合成が可能。sing:歌唱音声合成用のクエリの作成と歌唱音声合成が可能。
        /// (default to TypeEnum.Talk).
        /// </param>
        public SpeakerStyle(string name = default, int id = default, TypeEnum? type = TypeEnum.Talk)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SpeakerStyle and cannot be null");
            }

            Name = name;
            Id = id;
            Type = type;
        }


        /// <summary>
        /// スタイルの種類。talk:音声合成クエリの作成と音声合成が可能。singing_teacher:歌唱音声合成用のクエリの作成が可能。frame_decode:歌唱音声合成が可能。sing:歌唱音声合成用のクエリの作成と歌唱音声合成が可能。
        /// </summary>
        /// <value>スタイルの種類。talk:音声合成クエリの作成と音声合成が可能。singing_teacher:歌唱音声合成用のクエリの作成が可能。frame_decode:歌唱音声合成が可能。sing:歌唱音声合成用のクエリの作成と歌唱音声合成が可能。</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// スタイル名
        /// </summary>
        /// <value>スタイル名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// スタイルID
        /// </summary>
        /// <value>スタイルID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Returns true if SpeakerStyle instances are equal
        /// </summary>
        /// <param name="input">Instance of SpeakerStyle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpeakerStyle input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    Id == input.Id ||
                    Id.Equals(input.Id)
                ) &&
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpeakerStyle {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SpeakerStyle);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }

                hashCode = hashCode * 59 + Id.GetHashCode();
                hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }
    }
}