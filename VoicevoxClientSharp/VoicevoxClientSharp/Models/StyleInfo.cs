/*
 * VOICEVOX Engine
 *
 * VOICEVOX の音声合成エンジンです。
 *
 * The version of the OpenAPI document: 0.21.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace VoicevoxClient.Generated.Model
{
    /// <summary>
    /// スタイルの追加情報
    /// </summary>
    [DataContract(Name = "StyleInfo")]
    public class StyleInfo : IEquatable<StyleInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StyleInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StyleInfo()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StyleInfo" /> class.
        /// </summary>
        /// <param name="id">スタイルID (required).</param>
        /// <param name="icon">このスタイルのアイコンをbase64エンコードしたもの、あるいはURL (required).</param>
        /// <param name="portrait">このスタイルの立ち絵画像をbase64エンコードしたもの、あるいはURL.</param>
        /// <param name="voiceSamples">voiceSamples (required).</param>
        public StyleInfo(int id = default,
            string icon = default,
            string portrait = default,
            List<string> voiceSamples = default)
        {
            Id = id;
            // to ensure "icon" is required (not null)
            if (icon == null)
            {
                throw new ArgumentNullException("icon is a required property for StyleInfo and cannot be null");
            }

            Icon = icon;
            // to ensure "voiceSamples" is required (not null)
            if (voiceSamples == null)
            {
                throw new ArgumentNullException("voiceSamples is a required property for StyleInfo and cannot be null");
            }

            VoiceSamples = voiceSamples;
            Portrait = portrait;
        }

        /// <summary>
        /// スタイルID
        /// </summary>
        /// <value>スタイルID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// このスタイルのアイコンをbase64エンコードしたもの、あるいはURL
        /// </summary>
        /// <value>このスタイルのアイコンをbase64エンコードしたもの、あるいはURL</value>
        [DataMember(Name = "icon", IsRequired = true, EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// このスタイルの立ち絵画像をbase64エンコードしたもの、あるいはURL
        /// </summary>
        /// <value>このスタイルの立ち絵画像をbase64エンコードしたもの、あるいはURL</value>
        [DataMember(Name = "portrait", EmitDefaultValue = false)]
        public string Portrait { get; set; }

        /// <summary>
        /// Gets or Sets VoiceSamples
        /// </summary>
        [DataMember(Name = "voice_samples", IsRequired = true, EmitDefaultValue = false)]
        public List<string> VoiceSamples { get; set; }

        /// <summary>
        /// Returns true if StyleInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of StyleInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StyleInfo input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Id == input.Id ||
                    Id.Equals(input.Id)
                ) &&
                (
                    Icon == input.Icon ||
                    (Icon != null &&
                     Icon.Equals(input.Icon))
                ) &&
                (
                    Portrait == input.Portrait ||
                    (Portrait != null &&
                     Portrait.Equals(input.Portrait))
                ) &&
                (
                    VoiceSamples == input.VoiceSamples ||
                    (VoiceSamples != null &&
                     input.VoiceSamples != null &&
                     VoiceSamples.SequenceEqual(input.VoiceSamples))
                );
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StyleInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Portrait: ").Append(Portrait).Append("\n");
            sb.Append("  VoiceSamples: ").Append(VoiceSamples).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as StyleInfo);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Id.GetHashCode();
                if (Icon != null)
                {
                    hashCode = hashCode * 59 + Icon.GetHashCode();
                }

                if (Portrait != null)
                {
                    hashCode = hashCode * 59 + Portrait.GetHashCode();
                }

                if (VoiceSamples != null)
                {
                    hashCode = hashCode * 59 + VoiceSamples.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}