/*
 * VOICEVOX Engine
 *
 * VOICEVOX の音声合成エンジンです。
 *
 * The version of the OpenAPI document: 0.21.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace VoicevoxClient.Generated.Model
{
    /// <summary>
    /// 依存ライブラリのライセンス情報
    /// </summary>
    [DataContract(Name = "LicenseInfo")]
    public class LicenseInfo : IEquatable<LicenseInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LicenseInfo()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseInfo" /> class.
        /// </summary>
        /// <param name="name">依存ライブラリ名 (required).</param>
        /// <param name="varVersion">依存ライブラリのバージョン.</param>
        /// <param name="license">依存ライブラリのライセンス名.</param>
        /// <param name="text">依存ライブラリのライセンス本文 (required).</param>
        public LicenseInfo(string name = default,
            string varVersion = default,
            string license = default,
            string text = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for LicenseInfo and cannot be null");
            }

            Name = name;
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException("text is a required property for LicenseInfo and cannot be null");
            }

            Text = text;
            VarVersion = varVersion;
            License = license;
        }

        /// <summary>
        /// 依存ライブラリ名
        /// </summary>
        /// <value>依存ライブラリ名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// 依存ライブラリのバージョン
        /// </summary>
        /// <value>依存ライブラリのバージョン</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// 依存ライブラリのライセンス名
        /// </summary>
        /// <value>依存ライブラリのライセンス名</value>
        [DataMember(Name = "license", EmitDefaultValue = false)]
        public string License { get; set; }

        /// <summary>
        /// 依存ライブラリのライセンス本文
        /// </summary>
        /// <value>依存ライブラリのライセンス本文</value>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns true if LicenseInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseInfo input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    VarVersion == input.VarVersion ||
                    (VarVersion != null &&
                     VarVersion.Equals(input.VarVersion))
                ) &&
                (
                    License == input.License ||
                    (License != null &&
                     License.Equals(input.License))
                ) &&
                (
                    Text == input.Text ||
                    (Text != null &&
                     Text.Equals(input.Text))
                );
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as LicenseInfo);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }

                if (VarVersion != null)
                {
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                }

                if (License != null)
                {
                    hashCode = hashCode * 59 + License.GetHashCode();
                }

                if (Text != null)
                {
                    hashCode = hashCode * 59 + Text.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}