/*
 * VOICEVOX Engine
 *
 * VOICEVOX の音声合成エンジンです。
 *
 * The version of the OpenAPI document: 0.21.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace VoicevoxClient.Generated.Model
{
    /// <summary>
    /// キャラクター情報
    /// </summary>
    [DataContract(Name = "Speaker")]
    public class Speaker : IEquatable<Speaker>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Speaker" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Speaker()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Speaker" /> class.
        /// </summary>
        /// <param name="name">名前 (required).</param>
        /// <param name="speakerUuid">キャラクターのUUID (required).</param>
        /// <param name="styles">styles (required).</param>
        /// <param name="varVersion">キャラクターのバージョン (required).</param>
        /// <param name="supportedFeatures">supportedFeatures.</param>
        public Speaker(string name = default,
            string speakerUuid = default,
            List<SpeakerStyle> styles = default,
            string varVersion = default,
            SpeakerSupportedFeatures supportedFeatures = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Speaker and cannot be null");
            }

            Name = name;
            // to ensure "speakerUuid" is required (not null)
            if (speakerUuid == null)
            {
                throw new ArgumentNullException("speakerUuid is a required property for Speaker and cannot be null");
            }

            SpeakerUuid = speakerUuid;
            // to ensure "styles" is required (not null)
            if (styles == null)
            {
                throw new ArgumentNullException("styles is a required property for Speaker and cannot be null");
            }

            Styles = styles;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for Speaker and cannot be null");
            }

            VarVersion = varVersion;
            SupportedFeatures = supportedFeatures;
        }

        /// <summary>
        /// 名前
        /// </summary>
        /// <value>名前</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// キャラクターのUUID
        /// </summary>
        /// <value>キャラクターのUUID</value>
        [DataMember(Name = "speaker_uuid", IsRequired = true, EmitDefaultValue = false)]
        public string SpeakerUuid { get; set; }

        /// <summary>
        /// Gets or Sets Styles
        /// </summary>
        [DataMember(Name = "styles", IsRequired = true, EmitDefaultValue = false)]
        public List<SpeakerStyle> Styles { get; set; }

        /// <summary>
        /// キャラクターのバージョン
        /// </summary>
        /// <value>キャラクターのバージョン</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets SupportedFeatures
        /// </summary>
        [DataMember(Name = "supported_features", EmitDefaultValue = false)]
        public SpeakerSupportedFeatures SupportedFeatures { get; set; }

        /// <summary>
        /// Returns true if Speaker instances are equal
        /// </summary>
        /// <param name="input">Instance of Speaker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Speaker input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Name == input.Name ||
                    (Name != null &&
                     Name.Equals(input.Name))
                ) &&
                (
                    SpeakerUuid == input.SpeakerUuid ||
                    (SpeakerUuid != null &&
                     SpeakerUuid.Equals(input.SpeakerUuid))
                ) &&
                (
                    Styles == input.Styles ||
                    (Styles != null &&
                     input.Styles != null &&
                     Styles.SequenceEqual(input.Styles))
                ) &&
                (
                    VarVersion == input.VarVersion ||
                    (VarVersion != null &&
                     VarVersion.Equals(input.VarVersion))
                ) &&
                (
                    SupportedFeatures == input.SupportedFeatures ||
                    (SupportedFeatures != null &&
                     SupportedFeatures.Equals(input.SupportedFeatures))
                );
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Speaker {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SpeakerUuid: ").Append(SpeakerUuid).Append("\n");
            sb.Append("  Styles: ").Append(Styles).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  SupportedFeatures: ").Append(SupportedFeatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Speaker);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }

                if (SpeakerUuid != null)
                {
                    hashCode = hashCode * 59 + SpeakerUuid.GetHashCode();
                }

                if (Styles != null)
                {
                    hashCode = hashCode * 59 + Styles.GetHashCode();
                }

                if (VarVersion != null)
                {
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                }

                if (SupportedFeatures != null)
                {
                    hashCode = hashCode * 59 + SupportedFeatures.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}