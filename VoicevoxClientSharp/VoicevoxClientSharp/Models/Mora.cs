/*
 * VOICEVOX Engine
 *
 * VOICEVOX の音声合成エンジンです。
 *
 * The version of the OpenAPI document: 0.21.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace VoicevoxClient.Generated.Model
{
    /// <summary>
    /// モーラ（子音＋母音）ごとの情報
    /// </summary>
    [DataContract(Name = "Mora")]
    public class Mora : IEquatable<Mora>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Mora" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Mora()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Mora" /> class.
        /// </summary>
        /// <param name="text">文字 (required).</param>
        /// <param name="consonant">子音の音素.</param>
        /// <param name="consonantLength">子音の音長.</param>
        /// <param name="vowel">母音の音素 (required).</param>
        /// <param name="vowelLength">母音の音長 (required).</param>
        /// <param name="pitch">音高 (required).</param>
        public Mora(string text = default,
            string consonant = default,
            decimal? consonantLength = default,
            string vowel = default,
            decimal vowelLength = default,
            decimal pitch = default)
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException("text is a required property for Mora and cannot be null");
            }

            Text = text;
            // to ensure "vowel" is required (not null)
            if (vowel == null)
            {
                throw new ArgumentNullException("vowel is a required property for Mora and cannot be null");
            }

            Vowel = vowel;
            VowelLength = vowelLength;
            Pitch = pitch;
            Consonant = consonant;
            ConsonantLength = consonantLength;
        }

        /// <summary>
        /// 文字
        /// </summary>
        /// <value>文字</value>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// 子音の音素
        /// </summary>
        /// <value>子音の音素</value>
        [DataMember(Name = "consonant", EmitDefaultValue = false)]
        public string Consonant { get; set; }

        /// <summary>
        /// 子音の音長
        /// </summary>
        /// <value>子音の音長</value>
        [DataMember(Name = "consonant_length", EmitDefaultValue = true)]
        public decimal? ConsonantLength { get; set; }

        /// <summary>
        /// 母音の音素
        /// </summary>
        /// <value>母音の音素</value>
        [DataMember(Name = "vowel", IsRequired = true, EmitDefaultValue = false)]
        public string Vowel { get; set; }

        /// <summary>
        /// 母音の音長
        /// </summary>
        /// <value>母音の音長</value>
        [DataMember(Name = "vowel_length", IsRequired = true, EmitDefaultValue = false)]
        public decimal VowelLength { get; set; }

        /// <summary>
        /// 音高
        /// </summary>
        /// <value>音高</value>
        [DataMember(Name = "pitch", IsRequired = true, EmitDefaultValue = false)]
        public decimal Pitch { get; set; }

        /// <summary>
        /// Returns true if Mora instances are equal
        /// </summary>
        /// <param name="input">Instance of Mora to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Mora input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Text == input.Text ||
                    (Text != null &&
                     Text.Equals(input.Text))
                ) &&
                (
                    Consonant == input.Consonant ||
                    (Consonant != null &&
                     Consonant.Equals(input.Consonant))
                ) &&
                (
                    ConsonantLength == input.ConsonantLength ||
                    (ConsonantLength != null &&
                     ConsonantLength.Equals(input.ConsonantLength))
                ) &&
                (
                    Vowel == input.Vowel ||
                    (Vowel != null &&
                     Vowel.Equals(input.Vowel))
                ) &&
                (
                    VowelLength == input.VowelLength ||
                    VowelLength.Equals(input.VowelLength)
                ) &&
                (
                    Pitch == input.Pitch ||
                    Pitch.Equals(input.Pitch)
                );
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Mora {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Consonant: ").Append(Consonant).Append("\n");
            sb.Append("  ConsonantLength: ").Append(ConsonantLength).Append("\n");
            sb.Append("  Vowel: ").Append(Vowel).Append("\n");
            sb.Append("  VowelLength: ").Append(VowelLength).Append("\n");
            sb.Append("  Pitch: ").Append(Pitch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Mora);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Text != null)
                {
                    hashCode = hashCode * 59 + Text.GetHashCode();
                }

                if (Consonant != null)
                {
                    hashCode = hashCode * 59 + Consonant.GetHashCode();
                }

                if (ConsonantLength != null)
                {
                    hashCode = hashCode * 59 + ConsonantLength.GetHashCode();
                }

                if (Vowel != null)
                {
                    hashCode = hashCode * 59 + Vowel.GetHashCode();
                }

                hashCode = hashCode * 59 + VowelLength.GetHashCode();
                hashCode = hashCode * 59 + Pitch.GetHashCode();
                return hashCode;
            }
        }
    }
}