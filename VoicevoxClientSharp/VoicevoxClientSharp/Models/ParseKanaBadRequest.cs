/*
 * VOICEVOX Engine
 *
 * VOICEVOX の音声合成エンジンです。
 *
 * The version of the OpenAPI document: 0.21.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace VoicevoxClient.Generated.Model
{
    /// <summary>
    /// ParseKanaBadRequest
    /// </summary>
    [DataContract(Name = "ParseKanaBadRequest")]
    public class ParseKanaBadRequest : IEquatable<ParseKanaBadRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParseKanaBadRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParseKanaBadRequest()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParseKanaBadRequest" /> class.
        /// </summary>
        /// <param name="text">エラーメッセージ (required).</param>
        /// <param name="errorName">
        /// エラー名  |name|description| |- --|- --| | UNKNOWN_TEXT | 判別できない読み仮名があります: {text} | | ACCENT_TOP |
        /// 句頭にアクセントは置けません: {text} | | ACCENT_TWICE | 1つのアクセント句に二つ以上のアクセントは置けません: {text} | | ACCENT_NOTFOUND |
        /// アクセントを指定していないアクセント句があります: {text} | | EMPTY_PHRASE | {position}番目のアクセント句が空白です | | INTERROGATION_MARK_NOT_AT_END |
        /// アクセント句末以外に「？」は置けません: {text} | | INFINITE_LOOP | 処理時に無限ループになってしまいました...バグ報告をお願いします。 | (required).
        /// </param>
        /// <param name="errorArgs">エラーを起こした箇所 (required).</param>
        public ParseKanaBadRequest(string text = default,
            string errorName = default,
            Dictionary<string, string> errorArgs = default)
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException(
                    "text is a required property for ParseKanaBadRequest and cannot be null");
            }

            Text = text;
            // to ensure "errorName" is required (not null)
            if (errorName == null)
            {
                throw new ArgumentNullException(
                    "errorName is a required property for ParseKanaBadRequest and cannot be null");
            }

            ErrorName = errorName;
            // to ensure "errorArgs" is required (not null)
            if (errorArgs == null)
            {
                throw new ArgumentNullException(
                    "errorArgs is a required property for ParseKanaBadRequest and cannot be null");
            }

            ErrorArgs = errorArgs;
        }

        /// <summary>
        /// エラーメッセージ
        /// </summary>
        /// <value>エラーメッセージ</value>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// エラー名  |name|description| |- --|- --| | UNKNOWN_TEXT | 判別できない読み仮名があります: {text} | | ACCENT_TOP | 句頭にアクセントは置けません: {text} |
        /// | ACCENT_TWICE | 1つのアクセント句に二つ以上のアクセントは置けません: {text} | | ACCENT_NOTFOUND | アクセントを指定していないアクセント句があります: {text} | |
        /// EMPTY_PHRASE | {position}番目のアクセント句が空白です | | INTERROGATION_MARK_NOT_AT_END | アクセント句末以外に「？」は置けません: {text} | |
        /// INFINITE_LOOP | 処理時に無限ループになってしまいました...バグ報告をお願いします。 |
        /// </summary>
        /// <value>
        /// エラー名  |name|description| |- --|- --| | UNKNOWN_TEXT | 判別できない読み仮名があります: {text} | | ACCENT_TOP | 句頭にアクセントは置けません:
        /// {text} | | ACCENT_TWICE | 1つのアクセント句に二つ以上のアクセントは置けません: {text} | | ACCENT_NOTFOUND | アクセントを指定していないアクセント句があります: {text} | |
        /// EMPTY_PHRASE | {position}番目のアクセント句が空白です | | INTERROGATION_MARK_NOT_AT_END | アクセント句末以外に「？」は置けません: {text} | |
        /// INFINITE_LOOP | 処理時に無限ループになってしまいました...バグ報告をお願いします。 |
        /// </value>
        [DataMember(Name = "error_name", IsRequired = true, EmitDefaultValue = false)]
        public string ErrorName { get; set; }

        /// <summary>
        /// エラーを起こした箇所
        /// </summary>
        /// <value>エラーを起こした箇所</value>
        [DataMember(Name = "error_args", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, string> ErrorArgs { get; set; }

        /// <summary>
        /// Returns true if ParseKanaBadRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ParseKanaBadRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParseKanaBadRequest input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Text == input.Text ||
                    (Text != null &&
                     Text.Equals(input.Text))
                ) &&
                (
                    ErrorName == input.ErrorName ||
                    (ErrorName != null &&
                     ErrorName.Equals(input.ErrorName))
                ) &&
                (
                    ErrorArgs == input.ErrorArgs ||
                    (ErrorArgs != null &&
                     input.ErrorArgs != null &&
                     ErrorArgs.SequenceEqual(input.ErrorArgs))
                );
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParseKanaBadRequest {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ErrorName: ").Append(ErrorName).Append("\n");
            sb.Append("  ErrorArgs: ").Append(ErrorArgs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ParseKanaBadRequest);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Text != null)
                {
                    hashCode = hashCode * 59 + Text.GetHashCode();
                }

                if (ErrorName != null)
                {
                    hashCode = hashCode * 59 + ErrorName.GetHashCode();
                }

                if (ErrorArgs != null)
                {
                    hashCode = hashCode * 59 + ErrorArgs.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}