/*
 * VOICEVOX Engine
 *
 * VOICEVOX の音声合成エンジンです。
 *
 * The version of the OpenAPI document: 0.21.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace VoicevoxClient.Generated.Model
{
    /// <summary>
    /// 音符ごとの情報
    /// </summary>
    [DataContract(Name = "Note")]
    public class Note : IEquatable<Note>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Note" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Note()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Note" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="key">音階.</param>
        /// <param name="frameLength">音符のフレーム長 (required).</param>
        /// <param name="lyric">音符の歌詞 (required).</param>
        public Note(string id = default, int key = default, int frameLength = default, string lyric = default)
        {
            FrameLength = frameLength;
            // to ensure "lyric" is required (not null)
            if (lyric == null)
            {
                throw new ArgumentNullException("lyric is a required property for Note and cannot be null");
            }

            Lyric = lyric;
            Id = id;
            Key = key;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// 音階
        /// </summary>
        /// <value>音階</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public int Key { get; set; }

        /// <summary>
        /// 音符のフレーム長
        /// </summary>
        /// <value>音符のフレーム長</value>
        [DataMember(Name = "frame_length", IsRequired = true, EmitDefaultValue = false)]
        public int FrameLength { get; set; }

        /// <summary>
        /// 音符の歌詞
        /// </summary>
        /// <value>音符の歌詞</value>
        [DataMember(Name = "lyric", IsRequired = true, EmitDefaultValue = false)]
        public string Lyric { get; set; }

        /// <summary>
        /// Returns true if Note instances are equal
        /// </summary>
        /// <param name="input">Instance of Note to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Note input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Key == input.Key ||
                    Key.Equals(input.Key)
                ) &&
                (
                    FrameLength == input.FrameLength ||
                    FrameLength.Equals(input.FrameLength)
                ) &&
                (
                    Lyric == input.Lyric ||
                    (Lyric != null &&
                     Lyric.Equals(input.Lyric))
                );
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Note {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  FrameLength: ").Append(FrameLength).Append("\n");
            sb.Append("  Lyric: ").Append(Lyric).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Note);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }

                hashCode = hashCode * 59 + Key.GetHashCode();
                hashCode = hashCode * 59 + FrameLength.GetHashCode();
                if (Lyric != null)
                {
                    hashCode = hashCode * 59 + Lyric.GetHashCode();
                }

                return hashCode;
            }
        }
    }
}